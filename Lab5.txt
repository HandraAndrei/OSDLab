diff --git a/postbuild/paths.cmd b/postbuild/paths.cmd
index cec924b..ade0507 100644
--- a/postbuild/paths.cmd
+++ b/postbuild/paths.cmd
@@ -12,6 +12,7 @@ set PATH_TO_VM_DISK=__EMPTY__
 set PATH_TO_VM_TOOLS=__EMPTY__
 set VOL_MOUNT_LETTER=__EMPTY__
 
+if _%COMPUTERNAME%_==_DESKTOP-6K9VMO8_ goto config_DESKTOP-6K9VMO8
 if _%COMPUTERNAME%_==_AGURZOU-DEV-PC_ goto config_AGURZOU-DEV
 if _%COMPUTERNAME%_==_ALEX-PC_ goto config_ALEX-PC
 if _%COMPUTERNAME%_==_AGURZOU-LPT_ goto config_AGURZOU-LPT
@@ -69,4 +70,13 @@ set BOCHS_PATH="c:\Program Files (x86)\Bochs-2.6.8\"
 
 goto end
 
+:config_DESKTOP-6K9VMO8
+
+SET PATH_TO_VIX_TOOLS="C:\Program Files (x86)\VMware\VMware VIX"
+SET PXE_PATH="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\PXE"
+SET PATH_TO_VM_FILE="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.vmx"
+SET PATH_TO_LOG_FILE="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.log"
+SET PATH_TO_VM_DISK="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.vmdk"
+goto end
+
 :end
\ No newline at end of file
diff --git a/src/.gitignore b/src/.gitignore
new file mode 100644
index 0000000..a4d6d9c
--- /dev/null
+++ b/src/.gitignore
@@ -0,0 +1 @@
+.vs/
\ No newline at end of file
diff --git a/src/HAL9000/HAL9000.vcxproj b/src/HAL9000/HAL9000.vcxproj
index 0dd1641..f614446 100644
--- a/src/HAL9000/HAL9000.vcxproj
+++ b/src/HAL9000/HAL9000.vcxproj
@@ -181,6 +181,7 @@
     </PostBuildEvent>
   </ItemDefinitionGroup>
   <ItemGroup>
+    <ClCompile Include="semaphore.c" />
     <ClCompile Include="src\acpi_interface.c" />
     <ClCompile Include="src\acpi_osl.c" />
     <ClCompile Include="src\ap_tramp.c" />
@@ -366,6 +367,7 @@
     <ClInclude Include="headers\um_application.h" />
     <ClInclude Include="headers\vmm.h" />
     <ClInclude Include="headers\vm_reservation_space.h" />
+    <ClInclude Include="semaphore.h" />
   </ItemGroup>
   <ItemGroup>
     <YASM Include="src\_mboot32.yasm">
diff --git a/src/HAL9000/HAL9000.vcxproj.filters b/src/HAL9000/HAL9000.vcxproj.filters
index f31d483..6797bc4 100644
--- a/src/HAL9000/HAL9000.vcxproj.filters
+++ b/src/HAL9000/HAL9000.vcxproj.filters
@@ -402,6 +402,9 @@
     <ClCompile Include="src\test_process.c">
       <Filter>Source Files\debug\test\userprog</Filter>
     </ClCompile>
+    <ClCompile Include="semaphore.c">
+      <Filter>Source Files\executive</Filter>
+    </ClCompile>
   </ItemGroup>
   <ItemGroup>
     <ClInclude Include="headers\HAL9000.h">
@@ -704,6 +707,9 @@
     <ClInclude Include="headers\test_process.h">
       <Filter>Header Files\debug\test\userprog</Filter>
     </ClInclude>
+    <ClInclude Include="semaphore.h">
+      <Filter>Header Files\executive</Filter>
+    </ClInclude>
   </ItemGroup>
   <ItemGroup>
     <None Include="src\defines.yasm">
diff --git a/src/HAL9000/headers/thread_internal.h b/src/HAL9000/headers/thread_internal.h
index be2588a..c5c6948 100644
--- a/src/HAL9000/headers/thread_internal.h
+++ b/src/HAL9000/headers/thread_internal.h
@@ -282,3 +282,5 @@ void
 ThreadSetPriority(
     IN      THREAD_PRIORITY     NewPriority
     );
+
+int getNrOfThreads();
\ No newline at end of file
diff --git a/src/HAL9000/semaphore.c b/src/HAL9000/semaphore.c
new file mode 100644
index 0000000..be8e67e
--- /dev/null
+++ b/src/HAL9000/semaphore.c
@@ -0,0 +1,77 @@
+#include "HAL9000.h"
+#include "thread_internal.h"
+#include "semaphore.h"
+
+void
+SemaphoreInit(
+    OUT     PSEMAPHORE      Semaphore,
+    IN      DWORD           InitialValue
+) {
+    ASSERT(NULL != Semaphore);
+
+    memzero(Semaphore, sizeof(SEMAPHORE));
+
+    LockInit(&Semaphore->SemaphoreLock);
+
+    InitializeListHead(&Semaphore->WaitingList);
+
+    Semaphore->Value = InitialValue;
+
+}
+
+void
+SemaphoreDown(
+    INOUT   PSEMAPHORE      Semaphore,
+    IN      DWORD           Value
+) {
+    INTR_STATE dummystate;
+    INTR_STATE oldState;
+    PTHREAD pCurrentThread = GetCurrentThread();
+
+    ASSERT(NULL != Semaphore);
+    ASSERT(NULL != pCurrentThread);
+
+    oldState = CpuIntrDisable();
+
+    LockAcquire(&Semaphore->SemaphoreLock, &dummystate);
+    
+    while (Semaphore->Value - Value < 0) {
+        InsertTailList(&Semaphore->WaitingList, &pCurrentThread->ReadyList);
+        ThreadTakeBlockLock();
+        LockRelease(&Semaphore->SemaphoreLock, dummystate);
+        ThreadBlock();
+        LockAcquire(&Semaphore->SemaphoreLock, &dummystate);
+    }
+    
+    Semaphore->Value = Semaphore->Value - Value;
+    LockRelease(&Semaphore->SemaphoreLock, dummystate);
+
+    CpuIntrSetState(oldState);
+    
+}
+
+void
+SemaphoreUp(
+    INOUT   PSEMAPHORE      Semaphore,
+    IN      DWORD           Value
+) {
+
+    INTR_STATE oldState;
+    PLIST_ENTRY pEntry = NULL;
+
+    ASSERT(NULL != Semaphore);
+
+    LockAcquire(&Semaphore->SemaphoreLock, &oldState);
+
+    Semaphore->Value += Value;
+
+    pEntry = RemoveHeadList(&Semaphore->WaitingList);
+    if (pEntry != &Semaphore->WaitingList)
+    {
+        PTHREAD pThread = CONTAINING_RECORD(pEntry, THREAD, ReadyList);
+        ThreadUnblock(pThread);
+    }
+
+    LockRelease(&Semaphore->SemaphoreLock, oldState);
+
+}
\ No newline at end of file
diff --git a/src/HAL9000/semaphore.h b/src/HAL9000/semaphore.h
new file mode 100644
index 0000000..047c096
--- /dev/null
+++ b/src/HAL9000/semaphore.h
@@ -0,0 +1,34 @@
+#pragma once
+
+#include "list.h"
+#include "synch.h"
+#include "HAL9000.h"
+
+
+typedef struct _SEMAPHORE
+{
+    DWORD           Value;
+    LOCK            SemaphoreLock;
+
+    _Guarded_by_(SemaphoreLock)
+    LIST_ENTRY          WaitingList;
+    // ... add more fields here ...
+} SEMAPHORE, * PSEMAPHORE;
+
+void
+SemaphoreInit(
+    OUT     PSEMAPHORE      Semaphore,
+    IN      DWORD           InitialValue
+);
+
+void
+SemaphoreDown(
+    INOUT   PSEMAPHORE      Semaphore,
+    IN      DWORD           Value
+);
+
+void
+SemaphoreUp(
+    INOUT   PSEMAPHORE      Semaphore,
+    IN      DWORD           Value
+);
\ No newline at end of file
diff --git a/src/HAL9000/src/Entry64.c b/src/HAL9000/src/Entry64.c
index a7810ff..750f290 100644
--- a/src/HAL9000/src/Entry64.c
+++ b/src/HAL9000/src/Entry64.c
@@ -58,6 +58,8 @@ Entry64(
     DumpParameters(argv);
 
     status = SystemInit(argv);
+    //LogSetLevel(LogLevelTrace);
+    //LogSetTracedComponents(LogComponentThread);
     ASSERT(SUCCEEDED(status));
 
     LOGL("InitSystem executed successfully\n");
diff --git a/src/HAL9000/src/cmd_thread_helper.c b/src/HAL9000/src/cmd_thread_helper.c
index f794c95..d85c26c 100644
--- a/src/HAL9000/src/cmd_thread_helper.c
+++ b/src/HAL9000/src/cmd_thread_helper.c
@@ -128,7 +128,7 @@ void
     STATUS status;
 
     ASSERT(NumberOfParameters == 0);
-
+    LOG("Nr of Threads: %d", getNrOfThreads());
     LOG("%7s", "TID|");
     LOG("%20s", "Name|");
     LOG("%5s", "Prio|");
diff --git a/src/HAL9000/src/mutex.c b/src/HAL9000/src/mutex.c
index 57db7e8..7b0bb58 100644
--- a/src/HAL9000/src/mutex.c
+++ b/src/HAL9000/src/mutex.c
@@ -105,6 +105,7 @@ MutexRelease(
     else
     {
         Mutex->Holder = NULL;
+        //here is the comment
     }
 
     _Analysis_assume_lock_released_(*Mutex);
diff --git a/src/HAL9000/src/system.c b/src/HAL9000/src/system.c
index b0b436e..efc7155 100644
--- a/src/HAL9000/src/system.c
+++ b/src/HAL9000/src/system.c
@@ -70,7 +70,7 @@ SystemInit(
     status = STATUS_SUCCESS;
     pCpu = NULL;
 
-    LogSystemInit(LogLevelInfo,
+    LogSystemInit(LogLevelError,
                   LogComponentInterrupt | LogComponentIo | LogComponentAcpi,
                   TRUE
                   );
@@ -247,6 +247,7 @@ SystemInit(
     LOGL("Successfully intiialized system process!\n");
 
     status = ThreadSystemInitIdleForCurrentCPU();
+    LogSetLevel(LogLevelInfo);
     if (!SUCCEEDED(status))
     {
         LOG_FUNC_ERROR("ThreadSystemInitIdleForCurrentCPU", status);
diff --git a/src/HAL9000/src/thread.c b/src/HAL9000/src/thread.c
index b311f0c..46ebf9c 100644
--- a/src/HAL9000/src/thread.c
+++ b/src/HAL9000/src/thread.c
@@ -10,7 +10,7 @@
 #include "gdtmu.h"
 #include "pe_exports.h"
 
-#define TID_INCREMENT               4
+#define TID_INCREMENT               10
 
 #define THREAD_TIME_SLICE           1
 
@@ -32,10 +32,17 @@ typedef struct _THREAD_SYSTEM_DATA
     _Guarded_by_(AllThreadsLock)
     LIST_ENTRY          AllThreadsList;
 
+    int                 nrOfThreads;
+
     LOCK                ReadyThreadsLock;
 
     _Guarded_by_(ReadyThreadsLock)
     LIST_ENTRY          ReadyThreadsList;
+
+    //added for Threads projects
+    _Guarded_by_(ReadyThreadsLock)
+    THREAD_PRIORITY     RunningThreadsMinPriority;
+
 } THREAD_SYSTEM_DATA, *PTHREAD_SYSTEM_DATA;
 
 static THREAD_SYSTEM_DATA m_threadSystemData;
@@ -121,6 +128,7 @@ _ThreadDereference(
     INOUT   PTHREAD                 Thread
     );
 
+
 static FUNC_FreeFunction            _ThreadDestroy;
 
 static
@@ -142,7 +150,7 @@ ThreadSystemPreinit(
 
     InitializeListHead(&m_threadSystemData.AllThreadsList);
     LockInit(&m_threadSystemData.AllThreadsLock);
-
+    m_threadSystemData.nrOfThreads = 0;
     InitializeListHead(&m_threadSystemData.ReadyThreadsList);
     LockInit(&m_threadSystemData.ReadyThreadsLock);
 }
@@ -170,6 +178,7 @@ ThreadSystemInitMainForCurrentCPU(
     snprintf( mainThreadName, MAX_PATH, "%s-%02x", "main", pCpu->ApicId );
 
     status = _ThreadInit(mainThreadName, ThreadPriorityDefault, &pThread, FALSE);
+    //status = _ThreadInit(mainThreadName, ThreadPriorityDefault, NULL, FALSE);
     if (!SUCCEEDED(status))
     {
         LOG_FUNC_ERROR("_ThreadInit", status );
@@ -642,6 +651,9 @@ ThreadGetId(
 
     return (NULL != pThread) ? pThread->Id : 0;
 }
+int getNrOfThreads() {
+    return m_threadSystemData.nrOfThreads;
+}
 
 THREAD_PRIORITY
 ThreadGetPriority(
@@ -798,6 +810,7 @@ _ThreadInit(
 
         LockAcquire(&m_threadSystemData.AllThreadsLock, &oldIntrState);
         InsertTailList(&m_threadSystemData.AllThreadsList, &pThread->AllList);
+        m_threadSystemData.nrOfThreads++;
         LockRelease(&m_threadSystemData.AllThreadsLock, oldIntrState);
     }
     __finally
@@ -810,7 +823,7 @@ _ThreadInit(
                 pThread = NULL;
             }
         }
-
+        LOG("Thread with id 0x%X and name %s was created", pThread->Id, pThread->Name);
         *Thread = pThread;
 
         LOG_FUNC_END;
@@ -1187,8 +1200,11 @@ _ThreadDestroy(
     ASSERT(NULL != pThread);
     ASSERT(NULL == Context);
 
+    LOG("Thread with id 0x%X and name %s was finished", pThread->Id, pThread->Name);
+
     LockAcquire(&m_threadSystemData.AllThreadsLock, &oldState);
     RemoveEntryList(&pThread->AllList);
+    m_threadSystemData.nrOfThreads--;
     LockRelease(&m_threadSystemData.AllThreadsLock, oldState);
 
     // This must be done before removing the thread from the process list, else
diff --git a/src/Lab2.txt b/src/Lab2.txt
new file mode 100644
index 0000000..a21831e
--- /dev/null
+++ b/src/Lab2.txt
@@ -0,0 +1,129 @@
+diff --git a/postbuild/paths.cmd b/postbuild/paths.cmd
+index cec924b..ade0507 100644
+--- a/postbuild/paths.cmd
++++ b/postbuild/paths.cmd
+@@ -12,6 +12,7 @@ set PATH_TO_VM_DISK=__EMPTY__
+ set PATH_TO_VM_TOOLS=__EMPTY__
+ set VOL_MOUNT_LETTER=__EMPTY__
+ 
++if _%COMPUTERNAME%_==_DESKTOP-6K9VMO8_ goto config_DESKTOP-6K9VMO8
+ if _%COMPUTERNAME%_==_AGURZOU-DEV-PC_ goto config_AGURZOU-DEV
+ if _%COMPUTERNAME%_==_ALEX-PC_ goto config_ALEX-PC
+ if _%COMPUTERNAME%_==_AGURZOU-LPT_ goto config_AGURZOU-LPT
+@@ -69,4 +70,13 @@ set BOCHS_PATH="c:\Program Files (x86)\Bochs-2.6.8\"
+ 
+ goto end
+ 
++:config_DESKTOP-6K9VMO8
++
++SET PATH_TO_VIX_TOOLS="C:\Program Files (x86)\VMware\VMware VIX"
++SET PXE_PATH="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\PXE"
++SET PATH_TO_VM_FILE="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.vmx"
++SET PATH_TO_LOG_FILE="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.log"
++SET PATH_TO_VM_DISK="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.vmdk"
++goto end
++
+ :end
+\ No newline at end of file
+diff --git a/src/HAL9000/headers/thread_internal.h b/src/HAL9000/headers/thread_internal.h
+index be2588a..c5c6948 100644
+--- a/src/HAL9000/headers/thread_internal.h
++++ b/src/HAL9000/headers/thread_internal.h
+@@ -282,3 +282,5 @@ void
+ ThreadSetPriority(
+     IN      THREAD_PRIORITY     NewPriority
+     );
++
++int getNrOfThreads();
+\ No newline at end of file
+diff --git a/src/HAL9000/src/cmd_thread_helper.c b/src/HAL9000/src/cmd_thread_helper.c
+index f794c95..d85c26c 100644
+--- a/src/HAL9000/src/cmd_thread_helper.c
++++ b/src/HAL9000/src/cmd_thread_helper.c
+@@ -128,7 +128,7 @@ void
+     STATUS status;
+ 
+     ASSERT(NumberOfParameters == 0);
+-
++    LOG("Nr of Threads: %d", getNrOfThreads());
+     LOG("%7s", "TID|");
+     LOG("%20s", "Name|");
+     LOG("%5s", "Prio|");
+diff --git a/src/HAL9000/src/thread.c b/src/HAL9000/src/thread.c
+index b311f0c..9472327 100644
+--- a/src/HAL9000/src/thread.c
++++ b/src/HAL9000/src/thread.c
+@@ -10,7 +10,7 @@
+ #include "gdtmu.h"
+ #include "pe_exports.h"
+ 
+-#define TID_INCREMENT               4
++#define TID_INCREMENT               10
+ 
+ #define THREAD_TIME_SLICE           1
+ 
+@@ -32,6 +32,8 @@ typedef struct _THREAD_SYSTEM_DATA
+     _Guarded_by_(AllThreadsLock)
+     LIST_ENTRY          AllThreadsList;
+ 
++    int                 nrOfThreads;
++
+     LOCK                ReadyThreadsLock;
+ 
+     _Guarded_by_(ReadyThreadsLock)
+@@ -121,6 +123,7 @@ _ThreadDereference(
+     INOUT   PTHREAD                 Thread
+     );
+ 
++
+ static FUNC_FreeFunction            _ThreadDestroy;
+ 
+ static
+@@ -142,7 +145,7 @@ ThreadSystemPreinit(
+ 
+     InitializeListHead(&m_threadSystemData.AllThreadsList);
+     LockInit(&m_threadSystemData.AllThreadsLock);
+-
++    m_threadSystemData.nrOfThreads = 0;
+     InitializeListHead(&m_threadSystemData.ReadyThreadsList);
+     LockInit(&m_threadSystemData.ReadyThreadsLock);
+ }
+@@ -642,6 +645,9 @@ ThreadGetId(
+ 
+     return (NULL != pThread) ? pThread->Id : 0;
+ }
++int getNrOfThreads() {
++    return m_threadSystemData.nrOfThreads;
++}
+ 
+ THREAD_PRIORITY
+ ThreadGetPriority(
+@@ -798,6 +804,7 @@ _ThreadInit(
+ 
+         LockAcquire(&m_threadSystemData.AllThreadsLock, &oldIntrState);
+         InsertTailList(&m_threadSystemData.AllThreadsList, &pThread->AllList);
++        m_threadSystemData.nrOfThreads++;
+         LockRelease(&m_threadSystemData.AllThreadsLock, oldIntrState);
+     }
+     __finally
+@@ -810,7 +817,7 @@ _ThreadInit(
+                 pThread = NULL;
+             }
+         }
+-
++        LOG("Thread with id 0x%X and name %s was created", pThread->Id, pThread->Name);
+         *Thread = pThread;
+ 
+         LOG_FUNC_END;
+@@ -1187,8 +1194,11 @@ _ThreadDestroy(
+     ASSERT(NULL != pThread);
+     ASSERT(NULL == Context);
+ 
++    LOG("Thread with id 0x%X and name %s was finished", pThread->Id, pThread->Name);
++
+     LockAcquire(&m_threadSystemData.AllThreadsLock, &oldState);
+     RemoveEntryList(&pThread->AllList);
++    m_threadSystemData.nrOfThreads--;
+     LockRelease(&m_threadSystemData.AllThreadsLock, oldState);
+ 
+     // This must be done before removing the thread from the process list, else
diff --git a/src/Lab3.txt b/src/Lab3.txt
new file mode 100644
index 0000000..6ef5eee
--- /dev/null
+++ b/src/Lab3.txt
@@ -0,0 +1,182 @@
+diff --git a/postbuild/paths.cmd b/postbuild/paths.cmd
+index cec924b..ade0507 100644
+--- a/postbuild/paths.cmd
++++ b/postbuild/paths.cmd
+@@ -12,6 +12,7 @@ set PATH_TO_VM_DISK=__EMPTY__
+ set PATH_TO_VM_TOOLS=__EMPTY__
+ set VOL_MOUNT_LETTER=__EMPTY__
+ 
++if _%COMPUTERNAME%_==_DESKTOP-6K9VMO8_ goto config_DESKTOP-6K9VMO8
+ if _%COMPUTERNAME%_==_AGURZOU-DEV-PC_ goto config_AGURZOU-DEV
+ if _%COMPUTERNAME%_==_ALEX-PC_ goto config_ALEX-PC
+ if _%COMPUTERNAME%_==_AGURZOU-LPT_ goto config_AGURZOU-LPT
+@@ -69,4 +70,13 @@ set BOCHS_PATH="c:\Program Files (x86)\Bochs-2.6.8\"
+ 
+ goto end
+ 
++:config_DESKTOP-6K9VMO8
++
++SET PATH_TO_VIX_TOOLS="C:\Program Files (x86)\VMware\VMware VIX"
++SET PXE_PATH="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\PXE"
++SET PATH_TO_VM_FILE="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.vmx"
++SET PATH_TO_LOG_FILE="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.log"
++SET PATH_TO_VM_DISK="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.vmdk"
++goto end
++
+ :end
+\ No newline at end of file
+diff --git a/src/HAL9000/headers/thread_internal.h b/src/HAL9000/headers/thread_internal.h
+index be2588a..c5c6948 100644
+--- a/src/HAL9000/headers/thread_internal.h
++++ b/src/HAL9000/headers/thread_internal.h
+@@ -282,3 +282,5 @@ void
+ ThreadSetPriority(
+     IN      THREAD_PRIORITY     NewPriority
+     );
++
++int getNrOfThreads();
+\ No newline at end of file
+diff --git a/src/HAL9000/src/Entry64.c b/src/HAL9000/src/Entry64.c
+index a7810ff..98b703d 100644
+--- a/src/HAL9000/src/Entry64.c
++++ b/src/HAL9000/src/Entry64.c
+@@ -58,6 +58,8 @@ Entry64(
+     DumpParameters(argv);
+ 
+     status = SystemInit(argv);
++    LogSetLevel(LogLevelTrace);
++    LogSetTracedComponents(LogComponentThread);
+     ASSERT(SUCCEEDED(status));
+ 
+     LOGL("InitSystem executed successfully\n");
+diff --git a/src/HAL9000/src/cmd_thread_helper.c b/src/HAL9000/src/cmd_thread_helper.c
+index f794c95..d85c26c 100644
+--- a/src/HAL9000/src/cmd_thread_helper.c
++++ b/src/HAL9000/src/cmd_thread_helper.c
+@@ -128,7 +128,7 @@ void
+     STATUS status;
+ 
+     ASSERT(NumberOfParameters == 0);
+-
++    LOG("Nr of Threads: %d", getNrOfThreads());
+     LOG("%7s", "TID|");
+     LOG("%20s", "Name|");
+     LOG("%5s", "Prio|");
+diff --git a/src/HAL9000/src/system.c b/src/HAL9000/src/system.c
+index b0b436e..efc7155 100644
+--- a/src/HAL9000/src/system.c
++++ b/src/HAL9000/src/system.c
+@@ -70,7 +70,7 @@ SystemInit(
+     status = STATUS_SUCCESS;
+     pCpu = NULL;
+ 
+-    LogSystemInit(LogLevelInfo,
++    LogSystemInit(LogLevelError,
+                   LogComponentInterrupt | LogComponentIo | LogComponentAcpi,
+                   TRUE
+                   );
+@@ -247,6 +247,7 @@ SystemInit(
+     LOGL("Successfully intiialized system process!\n");
+ 
+     status = ThreadSystemInitIdleForCurrentCPU();
++    LogSetLevel(LogLevelInfo);
+     if (!SUCCEEDED(status))
+     {
+         LOG_FUNC_ERROR("ThreadSystemInitIdleForCurrentCPU", status);
+diff --git a/src/HAL9000/src/thread.c b/src/HAL9000/src/thread.c
+index b311f0c..0e9a004 100644
+--- a/src/HAL9000/src/thread.c
++++ b/src/HAL9000/src/thread.c
+@@ -10,7 +10,7 @@
+ #include "gdtmu.h"
+ #include "pe_exports.h"
+ 
+-#define TID_INCREMENT               4
++#define TID_INCREMENT               10
+ 
+ #define THREAD_TIME_SLICE           1
+ 
+@@ -32,6 +32,8 @@ typedef struct _THREAD_SYSTEM_DATA
+     _Guarded_by_(AllThreadsLock)
+     LIST_ENTRY          AllThreadsList;
+ 
++    int                 nrOfThreads;
++
+     LOCK                ReadyThreadsLock;
+ 
+     _Guarded_by_(ReadyThreadsLock)
+@@ -121,6 +123,7 @@ _ThreadDereference(
+     INOUT   PTHREAD                 Thread
+     );
+ 
++
+ static FUNC_FreeFunction            _ThreadDestroy;
+ 
+ static
+@@ -142,7 +145,7 @@ ThreadSystemPreinit(
+ 
+     InitializeListHead(&m_threadSystemData.AllThreadsList);
+     LockInit(&m_threadSystemData.AllThreadsLock);
+-
++    m_threadSystemData.nrOfThreads = 0;
+     InitializeListHead(&m_threadSystemData.ReadyThreadsList);
+     LockInit(&m_threadSystemData.ReadyThreadsLock);
+ }
+@@ -169,7 +172,8 @@ ThreadSystemInitMainForCurrentCPU(
+ 
+     snprintf( mainThreadName, MAX_PATH, "%s-%02x", "main", pCpu->ApicId );
+ 
+-    status = _ThreadInit(mainThreadName, ThreadPriorityDefault, &pThread, FALSE);
++    //status = _ThreadInit(mainThreadName, ThreadPriorityDefault, &pThread, FALSE);
++    status = _ThreadInit(mainThreadName, ThreadPriorityDefault, NULL, FALSE);
+     if (!SUCCEEDED(status))
+     {
+         LOG_FUNC_ERROR("_ThreadInit", status );
+@@ -642,6 +646,9 @@ ThreadGetId(
+ 
+     return (NULL != pThread) ? pThread->Id : 0;
+ }
++int getNrOfThreads() {
++    return m_threadSystemData.nrOfThreads;
++}
+ 
+ THREAD_PRIORITY
+ ThreadGetPriority(
+@@ -729,7 +736,7 @@ _ThreadInit(
+     LOG_FUNC_START;
+ 
+     ASSERT(NULL != Name);
+-    ASSERT(NULL != Thread);
++    //ASSERT(NULL != Thread);
+     ASSERT_INFO(ThreadPriorityLowest <= Priority && Priority <= ThreadPriorityMaximum,
+                 "Priority is 0x%x\n", Priority);
+ 
+@@ -798,6 +805,7 @@ _ThreadInit(
+ 
+         LockAcquire(&m_threadSystemData.AllThreadsLock, &oldIntrState);
+         InsertTailList(&m_threadSystemData.AllThreadsList, &pThread->AllList);
++        m_threadSystemData.nrOfThreads++;
+         LockRelease(&m_threadSystemData.AllThreadsLock, oldIntrState);
+     }
+     __finally
+@@ -810,7 +818,7 @@ _ThreadInit(
+                 pThread = NULL;
+             }
+         }
+-
++        LOG("Thread with id 0x%X and name %s was created", pThread->Id, pThread->Name);
+         *Thread = pThread;
+ 
+         LOG_FUNC_END;
+@@ -1187,8 +1195,11 @@ _ThreadDestroy(
+     ASSERT(NULL != pThread);
+     ASSERT(NULL == Context);
+ 
++    LOG("Thread with id 0x%X and name %s was finished", pThread->Id, pThread->Name);
++
+     LockAcquire(&m_threadSystemData.AllThreadsLock, &oldState);
+     RemoveEntryList(&pThread->AllList);
++    m_threadSystemData.nrOfThreads--;
+     LockRelease(&m_threadSystemData.AllThreadsLock, oldState);
+ 
+     // This must be done before removing the thread from the process list, else
diff --git a/src/Lab4.txt b/src/Lab4.txt
new file mode 100644
index 0000000..dd3af44
--- /dev/null
+++ b/src/Lab4.txt
@@ -0,0 +1,206 @@
+diff --git a/postbuild/paths.cmd b/postbuild/paths.cmd
+index cec924b..ade0507 100644
+--- a/postbuild/paths.cmd
++++ b/postbuild/paths.cmd
+@@ -12,6 +12,7 @@ set PATH_TO_VM_DISK=__EMPTY__
+ set PATH_TO_VM_TOOLS=__EMPTY__
+ set VOL_MOUNT_LETTER=__EMPTY__
+ 
++if _%COMPUTERNAME%_==_DESKTOP-6K9VMO8_ goto config_DESKTOP-6K9VMO8
+ if _%COMPUTERNAME%_==_AGURZOU-DEV-PC_ goto config_AGURZOU-DEV
+ if _%COMPUTERNAME%_==_ALEX-PC_ goto config_ALEX-PC
+ if _%COMPUTERNAME%_==_AGURZOU-LPT_ goto config_AGURZOU-LPT
+@@ -69,4 +70,13 @@ set BOCHS_PATH="c:\Program Files (x86)\Bochs-2.6.8\"
+ 
+ goto end
+ 
++:config_DESKTOP-6K9VMO8
++
++SET PATH_TO_VIX_TOOLS="C:\Program Files (x86)\VMware\VMware VIX"
++SET PXE_PATH="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\PXE"
++SET PATH_TO_VM_FILE="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.vmx"
++SET PATH_TO_LOG_FILE="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.log"
++SET PATH_TO_VM_DISK="D:\faculta\Anul IV\Semestrul I\OSD\Labs\Lab Materials\HAL9000folder-20221007\HAL9000\VM\HAL9000_VM\HAL9000.vmdk"
++goto end
++
+ :end
+\ No newline at end of file
+diff --git a/src/HAL9000/HAL9000.vcxproj b/src/HAL9000/HAL9000.vcxproj
+index 0dd1641..d8104a5 100644
+--- a/src/HAL9000/HAL9000.vcxproj
++++ b/src/HAL9000/HAL9000.vcxproj
+@@ -366,6 +366,7 @@
+     <ClInclude Include="headers\um_application.h" />
+     <ClInclude Include="headers\vmm.h" />
+     <ClInclude Include="headers\vm_reservation_space.h" />
++    <ClInclude Include="semaphore.h" />
+   </ItemGroup>
+   <ItemGroup>
+     <YASM Include="src\_mboot32.yasm">
+diff --git a/src/HAL9000/HAL9000.vcxproj.filters b/src/HAL9000/HAL9000.vcxproj.filters
+index f31d483..2275548 100644
+--- a/src/HAL9000/HAL9000.vcxproj.filters
++++ b/src/HAL9000/HAL9000.vcxproj.filters
+@@ -704,6 +704,9 @@
+     <ClInclude Include="headers\test_process.h">
+       <Filter>Header Files\debug\test\userprog</Filter>
+     </ClInclude>
++    <ClInclude Include="semaphore.h">
++      <Filter>Header Files\executive</Filter>
++    </ClInclude>
+   </ItemGroup>
+   <ItemGroup>
+     <None Include="src\defines.yasm">
+diff --git a/src/HAL9000/headers/thread_internal.h b/src/HAL9000/headers/thread_internal.h
+index be2588a..c5c6948 100644
+--- a/src/HAL9000/headers/thread_internal.h
++++ b/src/HAL9000/headers/thread_internal.h
+@@ -282,3 +282,5 @@ void
+ ThreadSetPriority(
+     IN      THREAD_PRIORITY     NewPriority
+     );
++
++int getNrOfThreads();
+\ No newline at end of file
+diff --git a/src/HAL9000/src/Entry64.c b/src/HAL9000/src/Entry64.c
+index a7810ff..750f290 100644
+--- a/src/HAL9000/src/Entry64.c
++++ b/src/HAL9000/src/Entry64.c
+@@ -58,6 +58,8 @@ Entry64(
+     DumpParameters(argv);
+ 
+     status = SystemInit(argv);
++    //LogSetLevel(LogLevelTrace);
++    //LogSetTracedComponents(LogComponentThread);
+     ASSERT(SUCCEEDED(status));
+ 
+     LOGL("InitSystem executed successfully\n");
+diff --git a/src/HAL9000/src/cmd_thread_helper.c b/src/HAL9000/src/cmd_thread_helper.c
+index f794c95..d85c26c 100644
+--- a/src/HAL9000/src/cmd_thread_helper.c
++++ b/src/HAL9000/src/cmd_thread_helper.c
+@@ -128,7 +128,7 @@ void
+     STATUS status;
+ 
+     ASSERT(NumberOfParameters == 0);
+-
++    LOG("Nr of Threads: %d", getNrOfThreads());
+     LOG("%7s", "TID|");
+     LOG("%20s", "Name|");
+     LOG("%5s", "Prio|");
+diff --git a/src/HAL9000/src/system.c b/src/HAL9000/src/system.c
+index b0b436e..efc7155 100644
+--- a/src/HAL9000/src/system.c
++++ b/src/HAL9000/src/system.c
+@@ -70,7 +70,7 @@ SystemInit(
+     status = STATUS_SUCCESS;
+     pCpu = NULL;
+ 
+-    LogSystemInit(LogLevelInfo,
++    LogSystemInit(LogLevelError,
+                   LogComponentInterrupt | LogComponentIo | LogComponentAcpi,
+                   TRUE
+                   );
+@@ -247,6 +247,7 @@ SystemInit(
+     LOGL("Successfully intiialized system process!\n");
+ 
+     status = ThreadSystemInitIdleForCurrentCPU();
++    LogSetLevel(LogLevelInfo);
+     if (!SUCCEEDED(status))
+     {
+         LOG_FUNC_ERROR("ThreadSystemInitIdleForCurrentCPU", status);
+diff --git a/src/HAL9000/src/thread.c b/src/HAL9000/src/thread.c
+index b311f0c..46ebf9c 100644
+--- a/src/HAL9000/src/thread.c
++++ b/src/HAL9000/src/thread.c
+@@ -10,7 +10,7 @@
+ #include "gdtmu.h"
+ #include "pe_exports.h"
+ 
+-#define TID_INCREMENT               4
++#define TID_INCREMENT               10
+ 
+ #define THREAD_TIME_SLICE           1
+ 
+@@ -32,10 +32,17 @@ typedef struct _THREAD_SYSTEM_DATA
+     _Guarded_by_(AllThreadsLock)
+     LIST_ENTRY          AllThreadsList;
+ 
++    int                 nrOfThreads;
++
+     LOCK                ReadyThreadsLock;
+ 
+     _Guarded_by_(ReadyThreadsLock)
+     LIST_ENTRY          ReadyThreadsList;
++
++    //added for Threads projects
++    _Guarded_by_(ReadyThreadsLock)
++    THREAD_PRIORITY     RunningThreadsMinPriority;
++
+ } THREAD_SYSTEM_DATA, *PTHREAD_SYSTEM_DATA;
+ 
+ static THREAD_SYSTEM_DATA m_threadSystemData;
+@@ -121,6 +128,7 @@ _ThreadDereference(
+     INOUT   PTHREAD                 Thread
+     );
+ 
++
+ static FUNC_FreeFunction            _ThreadDestroy;
+ 
+ static
+@@ -142,7 +150,7 @@ ThreadSystemPreinit(
+ 
+     InitializeListHead(&m_threadSystemData.AllThreadsList);
+     LockInit(&m_threadSystemData.AllThreadsLock);
+-
++    m_threadSystemData.nrOfThreads = 0;
+     InitializeListHead(&m_threadSystemData.ReadyThreadsList);
+     LockInit(&m_threadSystemData.ReadyThreadsLock);
+ }
+@@ -170,6 +178,7 @@ ThreadSystemInitMainForCurrentCPU(
+     snprintf( mainThreadName, MAX_PATH, "%s-%02x", "main", pCpu->ApicId );
+ 
+     status = _ThreadInit(mainThreadName, ThreadPriorityDefault, &pThread, FALSE);
++    //status = _ThreadInit(mainThreadName, ThreadPriorityDefault, NULL, FALSE);
+     if (!SUCCEEDED(status))
+     {
+         LOG_FUNC_ERROR("_ThreadInit", status );
+@@ -642,6 +651,9 @@ ThreadGetId(
+ 
+     return (NULL != pThread) ? pThread->Id : 0;
+ }
++int getNrOfThreads() {
++    return m_threadSystemData.nrOfThreads;
++}
+ 
+ THREAD_PRIORITY
+ ThreadGetPriority(
+@@ -798,6 +810,7 @@ _ThreadInit(
+ 
+         LockAcquire(&m_threadSystemData.AllThreadsLock, &oldIntrState);
+         InsertTailList(&m_threadSystemData.AllThreadsList, &pThread->AllList);
++        m_threadSystemData.nrOfThreads++;
+         LockRelease(&m_threadSystemData.AllThreadsLock, oldIntrState);
+     }
+     __finally
+@@ -810,7 +823,7 @@ _ThreadInit(
+                 pThread = NULL;
+             }
+         }
+-
++        LOG("Thread with id 0x%X and name %s was created", pThread->Id, pThread->Name);
+         *Thread = pThread;
+ 
+         LOG_FUNC_END;
+@@ -1187,8 +1200,11 @@ _ThreadDestroy(
+     ASSERT(NULL != pThread);
+     ASSERT(NULL == Context);
+ 
++    LOG("Thread with id 0x%X and name %s was finished", pThread->Id, pThread->Name);
++
+     LockAcquire(&m_threadSystemData.AllThreadsLock, &oldState);
+     RemoveEntryList(&pThread->AllList);
++    m_threadSystemData.nrOfThreads--;
+     LockRelease(&m_threadSystemData.AllThreadsLock, oldState);
+ 
+     // This must be done before removing the thread from the process list, else
diff --git a/src/Lab4_1.txt b/src/Lab4_1.txt
new file mode 100644
index 0000000..e69de29
